buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:3.2.5")
    }
}

plugins {
    id 'java'
    id 'com.palantir.docker' version '0.35.0'
    id 'org.springframework.boot' version '3.2.5'
}

group = 'kingstonduo'
version = "4.1"

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.palantir.docker'

jar {
    baseName='orion-data'
}

repositories {
    mavenCentral()
}

sourceCompatibility = '21'
targetCompatibility = '21'


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation ('org.springframework.boot:spring-boot-starter-data-mongodb') {
		exclude group: 'ch.qos.logback', module: 'logback-classics'
	}
	implementation 'commons-io:commons-io:2.16.1'
	implementation 'com.mysql:mysql-connector-j:8.0.33'
	implementation 'org.apache.commons:commons-compress:1.26.2'
	implementation 'org.apache.commons:commons-text:1.12.0'
	implementation 'commons-codec:commons-codec:1.17.0'
    implementation 'com.google.http-client:google-http-client-gson:1.19.0'
	implementation ('com.google.api-client:google-api-client:2.6.0') {
		exclude group: 'jakarta.servelet'
	}
	implementation ('com.google.oauth-client:google-oauth-client-jetty:1.36.0') {
		exclude group: 'org.mortbay.jetty', module: 'servlet-api'
		exclude group: 'jakarta.servelet'
	}
	implementation 'com.google.apis:google-api-services-drive:v3-rev197-1.25.0'
	implementation 'org.json:json:20240303'
    
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mockito:mockito-core'
    testImplementation('org.mockito:mockito-junit-jupiter:3.12.4')
    testImplementation 'org.springframework:spring-test:5.2.25.RELEASE'
	
}

springBoot {
    mainClass = "org.kpmp.Application"
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

def getCurrentGitBranch() {
  if (project.hasProperty('tag')) {
    def tagValue = project.property('tag')
    return tagValue
  } else {
      def gitBranch = "Unknown branch"
      try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
      } catch (e) {
        }
        if (gitBranch == "develop" || gitBranch == "master"){
          return project.version
        }else{
          return gitBranch
        }
    }
}

docker {
    name "kingstonduo/orion-data:" + getCurrentGitBranch()
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}
